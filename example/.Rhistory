RSelenium::startServer()
remDr <- remoteDriver(port = 4445L, browser = "chrome")
Sys.sleep(3)
remDr$open()
remDr <- remoteDriver(port = 4444L, browser = "chrome")
remDr$open()
remDr <- remoteDriver(port = 4444L, browser = "chrome")
remDr$open()
remDr <- remoteDriver(port = 32769L, browser = "chrome")
Sys.sleep(3)
remDr$open()
remDr <- remoteDriver(port = 4445L)
remDr$open()
head(remDr$sessionInfo)
remDr$getStatus()
remDr$navigate("https://www.prestocard.ca/en-US/Pages/ContentPages/Home.aspx")
remDr$findElement(using = 'xpath', '/html/body/header/div[2]/div[1]/div/span/a')$clickElement()
user <- remDr$findElement(using = 'css selector', "#SignIn_Username")
user$sendKeysToElement(list(username))
remDr <- remoteDriver(port = 4444)
remDr$open()
remDr <- remoteDriver(port = 4445)
remDr$open()
head(remDr$sessionInfo)
remDr$getStatus()
remDr <- remoteDriver(port = 4445)
remDr$open()
remDr$navigate("https://www.prestocard.ca/en-US/Pages/ContentPages/Home.aspx")
remDr$getTitle()
remDr$navigate("https://www.prestocard.ca/en-US/Pages/ContentPages/Home.aspx")
remDr$navigate("https://www.prestocard.ca/en-US/Pages/ContentPages/Home.aspx")
shiny::runApp('rnfc.gitlab/intellitix/example-dashboard')
origin <- as.POSIXct("2016-07-12 00:00", tz="GMT")
operation <- c(as.POSIXct('2000-01-01 00:00'), as.POSIXct('2000-01-01 17:00'))
head_title <- "Example Event"
runApp('rnfc.gitlab/intellitix/example-dashboard')
View(dashboardPageMod)
rm(ls())
ls()
rm(unlist(ls()))
unlist(ls())
shiny::runApp('Desktop/miles')
View(most_recent_data)
selection <- 105958
t <- get_data_adv_managers_filings(
search_names = NULL,
crd_ids = selection,
all_sections = T,
flatten_tables = F,
assign_to_enviornment = F
)
rm(t)
t <- get_data_adv_managers_filings(
search_names = NULL,
crd_ids = selection,
all_sections = T,
flatten_tables = F,
assign_to_enviornment = T
)
selection <- 105247
t <- get_data_adv_managers_filings(
search_names = NULL,
crd_ids = selection,
all_sections = T,
flatten_tables = F,
assign_to_enviornment = T
)
t <- get_data_adv_managers_filings(
search_names = NULL,
crd_ids = selection,
all_sections = T,
flatten_tables = F,
assign_to_enviornment = F
)
t <- get_data_adv_managers_filings(
search_names = NULL,
crd_ids = selection,
all_sections = T,
flatten_tables = T,
assign_to_enviornment = F
)
runApp('Downloads/miles 2')
selection <- 105247
t <- get_data_adv_managers_filings(
search_names = NULL,
crd_ids = selection,
all_sections = T,
flatten_tables = F,
assign_to_enviornment = F
)
devtools::install_github("abresler/fundManageR")
library(shiny)
library(shinydashboard)
library(shinyjs)
library(dplyr)
library(highcharter)
library(data.table)
library(tidyr)
library(stringr)
library(fasttime)
library(scales)
library(fundManageR)
library(DT)
library(treemap)
library(d3treeR)
rm(t)
t <- get_data_adv_managers_filings(
search_names = NULL,
crd_ids = selection,
all_sections = T,
flatten_tables = F,
assign_to_enviornment = F
)
t <- get_data_adv_managers_filings(
search_names = NULL,
crd_ids = selection,
all_sections = T,
flatten_tables = F
)
install.packages("tidyverse")
t <- get_data_adv_managers_filings(
search_names = NULL,
crd_ids = selection,
all_sections = T,
flatten_tables = F
)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(dplyr)
library(highcharter)
library(data.table)
library(tidyr)
library(stringr)
library(fasttime)
library(scales)
library(fundManageR)
library(DT)
library(treemap)
library(d3treeR)
t <- get_data_adv_managers_filings(
search_names = NULL,
crd_ids = selection,
all_sections = T,
flatten_tables = F
)
t <- get_data_adv_managers_filings(
search_names = NULL,
crd_ids = selection,
all_sections = T,
flatten_tables = F,
assign_to_environment = F
)
t <- get_data_adv_managers_filings(
search_names = NULL,
crd_ids = selection,
all_sections = T,
flatten_tables = F,
assign_to_environment = T
)
rm(t)
get_data_sec_adv_manager_sitemap() %>%
formattable()
selection <- c(105247)
t <- get_data_adv_managers_filings(
search_names = NULL,
crd_ids = selection,
all_sections = T,
assign_to_environment = T
)
warnings()
selection <- c(105247)
selection <- c(105247)
t <- get_data_adv_managers_filings(
search_names = NULL,
crd_ids = selection,
all_sections = T,
assign_to_environment = F
)
View(t)
rem(t)
t <- get_data_adv_managers_filings(
search_names = NULL,
crd_ids = selection
)
if("section7BPrivateFundReporting" %in% ls(envir = globalenv())){
df <- append(df, list(section7B = section7BPrivateFundReporting))
}
df <- list(data = t)
if("section7BPrivateFundReporting" %in% ls(envir = globalenv())){
df <- append(df, list(section7B = section7BPrivateFundReporting))
}
if(is.null(entity_df()$section7B)){
shiny:::reactiveStop(class = "validation")
}
is.null(df$section7B)
runApp('Desktop/miles')
runApp('Desktop/miles')
sample = data.frame(`Order Action`=seq_len(len),`Total`=seq_len(len),`Capital Apprec`=seq_len(len),
`Aggres Oppor`=seq_len(len),`Mgd. Accts.`=seq_len(len),`Ticker`=seq_len(len),
`Price`=seq_len(len),`Comm\Share`=seq_len(len),`Mkt`=seq_len(len),
sample = data.frame(`Order Action`=seq_len(len),`Total`=seq_len(len),`Capital Apprec`=seq_len(len),
`Aggres Oppor`=seq_len(len),`Mgd. Accts.`=seq_len(len),`Ticker`=seq_len(len),
`Price`=seq_len(len),`Comm\/Share`=seq_len(len),`Mkt`=seq_len(len),
sample = data.frame(`Order Action`=seq_len(len),`Total`=seq_len(len),`Capital Apprec`=seq_len(len),
`Aggres Oppor`=seq_len(len),`Mgd. Accts.`=seq_len(len),`Ticker`=seq_len(len),
`Price`=seq_len(len),`CommShare`=seq_len(len),`Mkt`=seq_len(len),
`Curr Sett`=seq_len(len),`CUID`=seq_len(len),`Alloc. Confirmed`=seq_len(len),
`Trade Uploaded`=seq_len(len))
len = 18
sample = data.frame(`Order Action`=seq_len(len),`Total`=seq_len(len),`Capital Apprec`=seq_len(len),
`Aggres Oppor`=seq_len(len),`Mgd. Accts.`=seq_len(len),`Ticker`=seq_len(len),
`Price`=seq_len(len),`CommShare`=seq_len(len),`Mkt`=seq_len(len),
`Curr Sett`=seq_len(len),`CUID`=seq_len(len),`Alloc. Confirmed`=seq_len(len),
`Trade Uploaded`=seq_len(len))
View(sample)
runApp('Desktop/timbot/output/The International 2016')
runApp('Desktop/timbot/output/The International 2016')
library(shiny)
library(shinydashboard)
library(shinyjs)
library(dplyr)
library(rCharts)
library(highcharter)
library(data.table)
library(tidyr)
library(stringr)
library(fasttime)
library(scales)
library(shinyAce)
library(RPostgreSQL)
library(rsvg)
library(rmarkdown)
library(knitr)
runApp('Desktop/timbot/output/The International 2016')
opts <- list(hello = 'hello')
data <- toJSON(opts)
require(rjson)
data <- toJSON(opts)
controlpanel <- function(opts, factor_list, element_id = NULL) {
require(rjson)
data <- toJSON(opts)
x <- list(
opts = data,
factors = factor_list
)
htmlwidgets::createWidget("controlpanel", x, width = NULL, height = NULL, elementId = element_id)
}
controlpanelOutput <- function(outputId, width = '100%', height = 'auto') {
htmlwidgets::shinyWidgetOutput(outputId, 'controlpanel', width, height, package = 'controlpanel')
}
renderControlpanel <- function(expr, env = parent.frame(), quoted = FALSE) {
if(!quoted) {expr <- substitute(expr)}
htmlwidgets::shinyRenderWidget(expr, controlpanelOutput, env, quoted = TRUE)
}
setwd("~/Desktop/3DScatterApp/www/widget/R")
devtools::create('controlpanel')
setwd('controlpanel')
htmlwidgets::scaffoldWidget('controlpanel')
getwd()
devtools::install()
library(controlpanel)
library(rjson)
opts <- fromJSON('options.json')
setwd("~/Desktop/3DScatterApp/www/widget/R/test")
opts <- fromJSON('options.json')
opts <- fromJSON(file='options.json')
shiny::runApp()
runApp()
runApp()
library(shiny)
library(controlpanel)
library(rjson)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(controlpanel)
library(controlpanel)
linkControlpanel <- function(outputId) {
shiny::tags$head(
shiny::tags$script(paste0('
var timeout;
$("#', outputId, '").on("controlchanged", function(e){
clearTimeout(timeout);
timeout = setTimeout(function() {
Shiny.onInputChange("', outputId,'", Math.random());
}, 500)
})
'))
)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(c("backports", "chron", "clipr", "coda", "colorspace", "data.table", "data.tree", "DiagrammeR", "digest", "flexdashboard", "forcats", "ggplot2", "git2r", "highcharter", "htmlTable", "Matrix", "nlme", "openssl", "pbdZMQ", "psych", "Rcpp", "Rfacebook", "rmarkdown", "roxygen2", "rprojroot", "rsconnect", "RSelenium", "RSQLite", "selectr", "shiny", "shinyjs", "tidyverse", "treemap", "visNetwork", "xml2", "yarrr", "zoo"))
install.packages(c("backports", "chron", "clipr", "coda", "colorspace", "data.table", "data.tree", "DiagrammeR", "digest", "flexdashboard", "forcats", "ggplot2", "git2r", "highcharter", "htmlTable", "Matrix", "nlme", "openssl", "pbdZMQ", "psych", "Rcpp", "Rfacebook", "rmarkdown", "roxygen2", "rprojroot", "rsconnect", "RSelenium", "RSQLite", "selectr", "shiny", "shinyjs", "tidyverse", "treemap", "visNetwork", "xml2", "yarrr", "zoo"))
install.packages(c("backports", "chron", "clipr", "coda", "colorspace", "data.table", "data.tree", "DiagrammeR", "digest", "flexdashboard", "forcats", "ggplot2", "git2r", "highcharter", "htmlTable", "Matrix", "nlme", "openssl", "pbdZMQ", "psych", "Rcpp", "Rfacebook", "rmarkdown", "roxygen2", "rprojroot", "rsconnect", "RSelenium", "RSQLite", "selectr", "shiny", "shinyjs", "tidyverse", "treemap", "visNetwork", "xml2", "yarrr", "zoo"))
install.packages(c("backports", "chron", "clipr", "coda", "colorspace", "data.table", "data.tree", "DiagrammeR", "digest", "flexdashboard", "forcats", "ggplot2", "git2r", "highcharter", "htmlTable", "Matrix", "nlme", "openssl", "pbdZMQ", "psych", "Rcpp", "Rfacebook", "rmarkdown", "roxygen2", "rprojroot", "rsconnect", "RSelenium", "RSQLite", "selectr", "shiny", "shinyjs", "tidyverse", "treemap", "visNetwork", "xml2", "yarrr", "zoo"))
install.packages("nlme")
library(shiny)
library(shinydashboard)
library(shinyjs)
library(controlpanel)
library(rjson)
linkControlpanel <- function(outputId) {
shiny::tags$head(
shiny::tags$script(
paste0('
var timeout;
$(document).ready(function(){
$("body").on("controlchanged", "#',outputId,'", function(e) {
clearTimeout(timeout)
timeout = setTimeout(function() {
console.log("hello")
Shiny.onInputChange("',outputId,'_opts", Math.random())
}, 500)
})
})
')
)
)
}
ui <- fluidPage(
useShinyjs(),
tags$head(
tags$script(src="https://use.fontawesome.com/a222ab71e2.js")
),
linkControlpanel('test'),
controlpanelOutput('test')
)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(controlpanel)
library(rjson)
shiny::runApp()
shiny::runApp()
library(controlpanel)
library(rjson)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(controlpanel)
library(rjson)
install.packages("shinyjs")
library(shinyjs)
library("shinyjs", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
remove.packages("shinyjs")
install.packages("shinyjs")
library(shinyjs)
version
version
library(threejsScatter)
shiny::runApp()
runApp()
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
opts <- list(
data = list(
#-- Series object
list(
id = 'series_1',
color = 'white',
data = list(
list(id = 'hello', x = 0, y = 0, z = 0),
list(id = 'world', x = 1, y = 3, z = 3),
list(id = 'domo', x = 3, y = -3, z = 2),
list(id = 'test', x = -3, y = -2, z = -3),
list(id = 'nice', x = -2.5, y = 1.23, z = -1.87)
),
option = list(
points = list(
labels = list(
enabled = TRUE,
style = list(colour = "white")
),
points = list(enabled = TRUE),
selection = list(enabled = TRUE),
tooltip = list(enabled = TRUE)
)
)
)
),
chart = list(
axes = list(
color = 0x666666,
labels = list(enabled = TRUE),
align = 'center'
)
)
)
output$test <- renderThreejsScatter(
threejsScatter(data = opts, dimX = 1000, dimY = 1000, dimZ = 1000)
)
}
ui <- fluidPage(
tags$head(
tags$script(src="https://use.fontawesome.com/a222ab71e2.js")
),
threejsScatterOutput('test')
)
ui <- fluidPage(
tags$head(
tags$script(src="https://use.fontawesome.com/a222ab71e2.js")
),
threejsScatterOutput('test')
)
ui <- fluidPage(
tags$head(
tags$script(src="https://use.fontawesome.com/a222ab71e2.js")
),
threejsScatterOutput('test')
)
library(shiny)
library(threejsScatter)
ui <- fluidPage(
tags$head(
tags$script(src="https://use.fontawesome.com/a222ab71e2.js")
),
threejsScatterOutput('test')
)
server <- function(input, output, session) {
opts <- list(
data = list(
#-- Series object
list(
id = 'series_1',
color = 'white',
data = list(
list(id = 'hello', x = 0, y = 0, z = 0),
list(id = 'world', x = 1, y = 3, z = 3),
list(id = 'domo', x = 3, y = -3, z = 2),
list(id = 'test', x = -3, y = -2, z = -3),
list(id = 'nice', x = -2.5, y = 1.23, z = -1.87)
),
option = list(
points = list(
labels = list(
enabled = TRUE,
style = list(colour = "white")
),
points = list(enabled = TRUE),
selection = list(enabled = TRUE),
tooltip = list(enabled = TRUE)
)
)
)
),
chart = list(
axes = list(
color = 0x666666,
labels = list(enabled = TRUE),
align = 'center'
)
)
)
output$test <- renderThreejsScatter(
threejsScatter(data = opts, dimX = 1000, dimY = 1000, dimZ = 1000)
)
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
remove.packages("threejsScatter", lib="~/Library/R/3.3/library")
library(threejsScatter)
runApp()
r
library(threejsScatter)
runApp()
